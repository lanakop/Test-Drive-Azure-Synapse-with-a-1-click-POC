{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "lkpkkh5fohw6et5cpocws1"
		},
		"CosmosDbeHealth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbeHealth'"
		},
		"EHealthCosmosDBimmunizations_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'EHealthCosmosDBimmunizations'"
		},
		"TripFaresSynapseAnalyticsLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TripFaresSynapseAnalyticsLinkedService'"
		},
		"eHealthImmunizationsTarget_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'eHealthImmunizationsTarget'"
		},
		"eHelathImmunizationSourceDaata_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'eHelathImmunizationSourceDaata'"
		},
		"ContractSourceLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lkpkkh5fohw6et5cpoc.dfs.core.windows.net/"
		},
		"HttpServerTripDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/trip-data.csv"
		},
		"HttpServerTripFareDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/fares-data.csv"
		},
		"TripFaresDataLakeStorageLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().datalakeAccountName,'.dfs.core.windows.net')}"
		},
		"eHealthImmunizationsTarget_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lkpkkh5fohw6et5cpoc.dfs.core.windows.net/"
		},
		"eHelathImmunizationSourceDaata_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lkpkkh5fohw6et5cpoc.dfs.core.windows.net/"
		},
		"keyVaultLinkedservice_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().keyVaultName,'.vault.azure.net/')}"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/C0_LoadContracts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadContracts_Contract_DataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadContracts_Contract_DataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"QueryDatSource": {},
									"ContractSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "LoadContracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/LoadContracts_Contract_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_4kc')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_4kc",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "cosmosdemo1/sampledata/dev_immunizations1.txt"
							},
							{
								"name": "Destination",
								"value": "immunizations1"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"ordinal": 1
										},
										"sink": {
											"path": "$"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_4kc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_4kc",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_4kc')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_4kc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadContracts_StartingPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "C0_LoadContracts",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "C0_LoadContracts",
								"type": "PipelineReference"
							},
							"parameters": {}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "LoadContracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/C0_LoadContracts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IngestTripDataIntoADLS",
						"description": "Copies the trip data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tripDataSink",
								"type": "DatasetReference",
								"parameters": {
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "IngestTripFaresDataIntoADLS",
						"description": "Copies the trip fare data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "faresDataSink",
								"type": "DatasetReference",
								"parameters": {
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "JoinAndAggregateData",
						"description": "Reads the raw data from both CSV files inside the ADLS, performs the desired transformations (inner join and aggregation) and writes the transformed data into the synapse SQL pool.",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "tripFaresDataTransformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripDataCSV": {
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										}
									},
									"FaresDataCSV": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									},
									"SynapseAnalyticsSink": {
										"SchemaName": {
											"value": "@pipeline().parameters.SchemaName",
											"type": "Expression"
										},
										"SynapseWorkspaceName": {
											"value": "@pipeline().parameters.SynapseWorkspaceName",
											"type": "Expression"
										},
										"SQLDedicatedPoolName": {
											"value": "@pipeline().parameters.SQLDedicatedPoolName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"SQLLoginUsername": {
											"value": "@pipeline().parameters.SQLLoginUsername",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create Schema If Does Not Exists",
						"description": "Creates the schema inside the SQL dedicated pool. Shema name comes from the pipeline parameter 'SchemaName'.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "IngestTripDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "IngestTripFaresDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '@{pipeline().parameters.SchemaName}')\nBEGIN\nEXEC('CREATE SCHEMA @{pipeline().parameters.SchemaName}')\nselect Count(*) from sys.symmetric_keys;\nEND\nELSE\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azureSynapseAnalyticsSchema",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data Trips Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'TripsData'))\nBEGIN \n   Truncate table TripsData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTripsData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data Fares Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'FaresData'))\nBEGIN \n   Truncate table FaresData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsFaresData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "tripFares"
					},
					"SynapseWorkspaceName": {
						"type": "string",
						"defaultValue": "lkpkkh5fohw6et5cpocws1.database.windows.net"
					},
					"SQLDedicatedPoolName": {
						"type": "string",
						"defaultValue": "lkpkkh5fohw6et5cpocws1p1"
					},
					"SQLLoginUsername": {
						"type": "string",
						"defaultValue": "adminlana"
					},
					"KeyVaultName": {
						"type": "string",
						"defaultValue": "kvlkpkkh5fohw6et5cpoc"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "lkpkkh5fohw6et5cpoc"
					}
				},
				"folder": {
					"name": "TripFaresDataPipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripsDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/dataflows/tripFaresDataTransformations')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsSchema')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTripsData')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsFaresData')]",
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsFaresData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "FaresData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTripsData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "TripsData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbSqlApiCollection1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "EHealthCosmosDBimmunizations",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"resourceType": {
							"type": "string"
						},
						"meta": {
							"type": "object",
							"properties": {
								"versionId": {
									"type": "integer"
								},
								"lastUpdated": {
									"type": "string"
								},
								"tag": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											}
										}
									}
								},
								"security": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"identifier": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"use": {
										"type": "string"
									},
									"type": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"system": {
															"type": "string"
														},
														"code": {
															"type": "string"
														},
														"display": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"system": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						},
						"extension": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"url": {
										"type": "string"
									},
									"valueCoding": {
										"type": "object",
										"properties": {
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"status": {
							"type": "string"
						},
						"notGiven": {
							"type": "boolean"
						},
						"vaccineCode": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								},
								"text": {
									"type": "string"
								}
							}
						},
						"patient": {
							"type": "object",
							"properties": {
								"reference": {
									"type": "string"
								},
								"display": {
									"type": "string"
								}
							}
						},
						"date": {
							"type": "string"
						},
						"_dateDTO": {
							"type": "string"
						},
						"primarySource": {
							"type": "boolean"
						},
						"reportOrigin": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"location": {
							"type": "object",
							"properties": {
								"display": {
									"type": "string"
								},
								"reference": {
									"type": "string"
								}
							}
						},
						"manufacturer": {
							"type": "object",
							"properties": {
								"reference": {
									"type": "string"
								},
								"identifier": {
									"type": "object",
									"properties": {
										"system": {
											"type": "string"
										},
										"value": {
											"type": "string"
										}
									}
								},
								"display": {
									"type": "string"
								}
							}
						},
						"lotNumber": {
							"type": "string"
						},
						"expirationDate": {
							"type": "string"
						},
						"_expirationDateDT": {
							"type": "string"
						},
						"site": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"route": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"doseQuantity": {
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"unit": {
									"type": "string"
								},
								"system": {
									"type": "string"
								},
								"code": {
									"type": "string"
								}
							}
						},
						"practitioner": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"actor": {
										"type": "object",
										"properties": {
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"note": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"text": {
										"type": "string"
									}
								}
							}
						},
						"vaccinationProtocol": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"targetDisease": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"coding": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"display": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									},
									"doseStatus": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"system": {
															"type": "string"
														},
														"code": {
															"type": "string"
														},
														"display": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"doseStatusReason": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"display": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"_active": {
							"type": "boolean"
						},
						"_pkey": {
							"type": "string"
						},
						"_docId": {
							"type": "string"
						},
						"reaction": {
							"type": "array"
						},
						"explanation": {
							"type": "object",
							"properties": {
								"reason": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"display": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"text": {
							"type": "object",
							"properties": {
								"status": {
									"type": "string"
								},
								"div": {
									"type": "string"
								}
							}
						},
						"encounter": {
							"type": "object",
							"properties": {
								"reference": {
									"type": "string"
								},
								"identifier": {
									"type": "object",
									"properties": {
										"system": {
											"type": "string"
										},
										"value": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "immunizations"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/EHealthCosmosDBimmunizations')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_4kc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "EHealthCosmosDBimmunizations",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "immunizations1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/EHealthCosmosDBimmunizations')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_b01')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbeHealth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "immunizations"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CosmosDbeHealth')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_4kc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eHelathImmunizationSourceDaata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dev_immunizations1.txt",
						"folderPath": "sampledata",
						"fileSystem": "cosmosdemo1"
					},
					"columnDelimiter": "-",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/eHelathImmunizationSourceDaata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_b01')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eHelathImmunizationSourceDaata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dev_immunizations.json",
						"folderPath": "sampledata",
						"fileSystem": "cosmosdemo1"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"resourceType": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"meta": {
							"type": "object",
							"properties": {
								"versionId": {
									"type": "integer"
								},
								"lastUpdated": {
									"type": "string"
								},
								"tag": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											}
										}
									}
								},
								"security": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"text": {
							"type": "object",
							"properties": {
								"status": {
									"type": "string"
								},
								"div": {
									"type": "string"
								}
							}
						},
						"identifier": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"system": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						},
						"status": {
							"type": "string"
						},
						"notGiven": {
							"type": "boolean"
						},
						"vaccineCode": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											}
										}
									}
								},
								"text": {
									"type": "string"
								}
							}
						},
						"patient": {
							"type": "object",
							"properties": {
								"reference": {
									"type": "string"
								},
								"display": {
									"type": "string"
								}
							}
						},
						"encounter": {
							"type": "object",
							"properties": {
								"reference": {
									"type": "string"
								},
								"identifier": {
									"type": "object",
									"properties": {
										"system": {
											"type": "string"
										},
										"value": {
											"type": "string"
										}
									}
								}
							}
						},
						"date": {
							"type": "string"
						},
						"_dateDTO": {
							"type": "string"
						},
						"primarySource": {
							"type": "boolean"
						},
						"location": {
							"type": "object",
							"properties": {
								"reference": {
									"type": "string"
								},
								"display": {
									"type": "string"
								}
							}
						},
						"manufacturer": {
							"type": "object",
							"properties": {
								"reference": {
									"type": "string"
								},
								"display": {
									"type": "string"
								},
								"identifier": {
									"type": "object",
									"properties": {
										"system": {
											"type": "string"
										},
										"value": {
											"type": "string"
										}
									}
								}
							}
						},
						"lotNumber": {
							"type": "string"
						},
						"expirationDate": {
							"type": "string"
						},
						"_expirationDateDT": {
							"type": "string"
						},
						"site": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"route": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"system": {
												"type": "string"
											},
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"doseQuantity": {
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"system": {
									"type": "string"
								},
								"code": {
									"type": "string"
								},
								"unit": {
									"type": "string"
								}
							}
						},
						"practitioner": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"role": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"system": {
															"type": "string"
														},
														"code": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"actor": {
										"type": "object",
										"properties": {
											"reference": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"note": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"text": {
										"type": "string"
									}
								}
							}
						},
						"explanation": {
							"type": "object",
							"properties": {
								"reason": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"system": {
															"type": "string"
														},
														"code": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"vaccinationProtocol": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"doseSequence": {
										"type": "integer"
									},
									"description": {
										"type": "string"
									},
									"authority": {
										"type": "object",
										"properties": {
											"reference": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									},
									"series": {
										"type": "string"
									},
									"seriesDoses": {
										"type": "integer"
									},
									"targetDisease": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"coding": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"system": {
																"type": "string"
															},
															"code": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									},
									"doseStatus": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"system": {
															"type": "string"
														},
														"code": {
															"type": "string"
														},
														"display": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"doseStatusReason": {
										"type": "object",
										"properties": {
											"coding": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"system": {
															"type": "string"
														},
														"code": {
															"type": "string"
														},
														"display": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"_etag": {
							"type": "string"
						},
						"_active": {
							"type": "boolean"
						},
						"_pkey": {
							"type": "string"
						},
						"_docId": {
							"type": "string"
						},
						"_rid": {
							"type": "string"
						},
						"_self": {
							"type": "string"
						},
						"_attachments": {
							"type": "string"
						},
						"_ts": {
							"type": "integer"
						},
						"reaction": {
							"type": "array"
						},
						"reportOrigin": {
							"type": "object",
							"properties": {
								"coding": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"code": {
												"type": "string"
											},
											"display": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/eHelathImmunizationSourceDaata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsSchema')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": "AggregateTaxiData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"keyVaultName": {
						"type": "string",
						"defaultValue": "kvmsft"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "adlsmsft"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "fares-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "payment_type",
						"type": "String"
					},
					{
						"name": "fare_amount",
						"type": "String"
					},
					{
						"name": "surcharge",
						"type": "String"
					},
					{
						"name": "mta_tax",
						"type": "String"
					},
					{
						"name": "tip_amount",
						"type": "String"
					},
					{
						"name": "tolls_amount",
						"type": "String"
					},
					{
						"name": "total_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripFareDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripFareDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"datalakeAccountName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripsDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ContractSourceLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ContractSourceLS_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbeHealth')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbeHealth_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EHealthCosmosDBimmunizations')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('EHealthCosmosDBimmunizations_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripFareDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripFareDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspaceTripsFares')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "6b129cb1-92ed-49d3-98bc-b927c4018d40",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataLakeStorageLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string"
					},
					"datalakeAccountName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('TripFaresDataLakeStorageLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "adlsAccessKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresSynapseAnalyticsLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('TripFaresSynapseAnalyticsLinkedService_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "synapseSqlLoginPassword"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/eHealthImmunizationsTarget')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('eHealthImmunizationsTarget_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('eHealthImmunizationsTarget_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/eHelathImmunizationSourceDaata')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('eHelathImmunizationSourceDaata_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('eHelathImmunizationSourceDaata_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/keyVaultLinkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('keyVaultLinkedservice_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadContracts_Contract_DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LoadContracts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ContractSourceLS",
								"type": "LinkedServiceReference"
							},
							"name": "QueryDatSource"
						}
					],
					"sinks": [
						{
							"name": "ContractSink"
						}
					],
					"transformations": [
						{
							"name": "SelectContract"
						}
					],
					"script": "source(output(\n\t\t{Sort_RecordTypeId.Name} as string,\n\t\t{Sort_Account__c.Name} as string,\n\t\tSort_Contract_Type__c as string,\n\t\tSort_Name as string,\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tName as string,\n\t\tRecordTypeId as string,\n\t\tCreatedDate as string,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as string,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as string,\n\t\tLastActivityDate as string,\n\t\tLastViewedDate as string,\n\t\tLastReferencedDate as string,\n\t\tAccount__c as string,\n\t\tActivate_Contract__c as boolean,\n\t\tAmendment_Date__c as string,\n\t\tAmendment_Description__c as string,\n\t\tCMS_Admin_Approver__c as string,\n\t\tCMS_Request_ID__c as string,\n\t\tCMS_Request__c as string,\n\t\tCMU_ISN_Waiver_Comment__c as string,\n\t\tCancellation_Terms__c as string,\n\t\tCompany__c as string,\n\t\tConsent_Decree_CD_Contractor__c as boolean,\n\t\tContract_Comment__c as string,\n\t\tContract_Related_To__c as string,\n\t\tContract_Status_Date__c as string,\n\t\tContract_Status__c as string,\n\t\tContract_Type__c as string,\n\t\tCurent_Approval_Stage_Date__c as string,\n\t\tCurrent_Approval_Stage__c as string,\n\t\tDifferent_Company_Flag__c as string,\n\t\tDivision_Waiver_Approver__c as string,\n\t\tEffective_Date__c as string,\n\t\tExecuted_Contract_Attached__c as string,\n\t\tExecution_Date__c as string,\n\t\tExpiration_Date__c as string,\n\t\tISN_Approval_Stage_Date__c as string,\n\t\tISN_Approval_Stage__c as string,\n\t\tISN_Company_Id__c as string,\n\t\tISN_Contracts_Agreements_Status__c as string,\n\t\tISN_Dashboard_Grade__c as string,\n\t\tISN_Insurance_Status__c as string,\n\t\tISN_Requirements_Met__c as boolean,\n\t\tISN_Status_Date__c as string,\n\t\tISN_Status__c as string,\n\t\tISN_Waiver_Completed__c as boolean,\n\t\tISN_Waiver_Email_Attached__c as boolean,\n\t\tISN_Waiver_Required__c as boolean,\n\t\tInsurance_Approval_Stage_Date__c as string,\n\t\tInsurance_Approval_Stage__c as string,\n\t\tInsurance_Requirement_Met__c as boolean,\n\t\tInsurance_Status__c as string,\n\t\tInsurance_Waiver_Completed__c as boolean,\n\t\tInsurance_Waiver_Email_Attached__c as boolean,\n\t\tInsurance_Waiver_Required__c as boolean,\n\t\tLegacy_Company__c as string,\n\t\tLegacy_Contract_Number__c as string,\n\t\tLegacy_Division__c as string,\n\t\tLegacy_Requestor__c as string,\n\t\tLegal_Approved__c as boolean,\n\t\tLegal_Contact__c as string,\n\t\tLegal_L_Number__c as string,\n\t\tLegal_Notes__c as string,\n\t\tMatrix_Aircraft_Aviation_Liability__c as boolean,\n\t\tMatrix_Asbestos_Coverage__c as boolean,\n\t\tMatrix_Business_Auto_Liability__c as integer,\n\t\tMatrix_Commercial_Gen_Liability__c as integer,\n\t\tMatrix_Contract_Required__c as boolean,\n\t\tMatrix_Employer_Liability__c as integer,\n\t\tMatrix_Errors_Omissions_E_O__c as string,\n\t\tMatrix_Excess_Liability__c as integer,\n\t\tMatrix_ISN_Required__c as boolean,\n\t\tMatrix_Insurance_Required__c as boolean,\n\t\tMatrix_MCS_90__c as boolean,\n\t\tMatrix_Other_Insurance_Required_Value__c as string,\n\t\tMatrix_Other_Insurance_Required__c as boolean,\n\t\tMatrix_Pollution_Liability__c as short,\n\t\tMatrix_Professional_Liability__c as boolean,\n\t\tMatrix_Risk_Ranking__c as string,\n\t\tMatrix_Workers_Compensation__c as integer,\n\t\tMatrix_XCU_Endorsement_If_Digging__c as boolean,\n\t\tMatrix_XCU_Hazard_Endorsement__c as boolean,\n\t\tNotification_Terms__c as string,\n\t\tOn_Behalf_Of__c as string,\n\t\tOther_Work_Type__c as string,\n\t\tOverall_Contract_Status__c as string,\n\t\tPAA_Executed_By_Title__c as string,\n\t\tPAA_Executed_By__c as string,\n\t\tRegion_Waiver_Approver__c as string,\n\t\tRevision__c as boolean,\n\t\tStrategic_Sourcing_Contacted__c as boolean,\n\t\tStrategically_Sourced__c as boolean,\n\t\tAffiliate_CounterParty__c as boolean,\n\t\tTerm_Type__c as string,\n\t\tTmp_Contractor_Name__c as string,\n\t\tVersion_Number__c as string,\n\t\tWaiver_Approval_Stage__c as string,\n\t\tWaiver_Role_Hierarchy__c as string,\n\t\tWork_Type_Combined__c as string,\n\t\tWork_Type__c as string,\n\t\tXternal_CMS_Contract_ID__c as string,\n\t\tXternal_Record_Type_ID__c as string,\n\t\tUpcoming_Insurance_Expiration__c as string,\n\t\tSitePrefixURL__c as string,\n\t\tAccounting_Contract_Type__c as string,\n\t\tContact_Email__c as string,\n\t\tISN_Refresh__c as boolean,\n\t\tSend_CMS_Insurance_Expiration_Emails__c as string,\n\t\tMinimum_Expiration_Date_Insurance__c as string,\n\t\tAFE_Project__c as string,\n\t\tContract_Status_Notes__c as string,\n\t\tLocation__c as string,\n\t\tPipeline__c as string,\n\t\tAccounts_Payable_Number__c as string,\n\t\tAccounts_Receivable_Number__c as string,\n\t\tTracking_Alarm_Days_Left__c as boolean,\n\t\tActivation_Override_Notes__c as string,\n\t\tAnnual_cost__c as string,\n\t\tAssignment__c as string,\n\t\tCancellation_Date__c as string,\n\t\tChange_of_Control__c as string,\n\t\tDeficiency_Language__c as string,\n\t\tContract_Contact_Address__c as string,\n\t\tContract_Contact_City__c as string,\n\t\tContract_Contact_Email__c as string,\n\t\tContract_Contact_Fax__c as string,\n\t\tContract_Contact_Name__c as string,\n\t\tContract_Contact_Phone__c as string,\n\t\tContract_Contact_State__c as string,\n\t\tContract_Contact_Zip__c as string,\n\t\tContract_Notes__c as string,\n\t\tContract_Number__c as string,\n\t\tContract_Sub_Type_Notes__c as string,\n\t\tContract_Sub_Type__c as string,\n\t\tContractor_Type__c as string,\n\t\tCounterparty_Contract_Description__c as string,\n\t\tCounterparty_s_Amendment_Number__c as string,\n\t\tCountries_Services_Products__c as string,\n\t\tCountries_Where_Data_is_Stored__c as string,\n\t\tCurrent_Term_End_Date__c as string,\n\t\tDate_Stored_Outside_US_Canada__c as string,\n\t\tAccounting_End_Date__c as string,\n\t\tDodd_Frank_Trade_Option__c as boolean,\n\t\tEscalation_Alarm_Date__c as string,\n\t\tEscalation_Capped__c as string,\n\t\tEscalation_Date_Notes__c as string,\n\t\tEscalation_Decrease_Allowed__c as string,\n\t\tEscalation_Effective_Date__c as string,\n\t\tEscalation_Note__c as string,\n\t\tEthane_C2_Deduct__c as string,\n\t\tEthane_C2_Ethane_Rejection__c as string,\n\t\tEthane_C2_MAX_Recovery__c as string,\n\t\tEthane_C2_MIN_Recovery__c as string,\n\t\tEthane_C2_Notes__c as string,\n\t\tEthane_C2_Pricing_Mechanism__c as string,\n\t\tDesignation__c as string,\n\t\tFuel_Inlet_MMBTU_Deduct__c as string,\n\t\tFuel_Inlet_MMBTU_Ethane_Rejection__c as string,\n\t\tFuel_Inlet_MMBTU_MAX_Recovery__c as string,\n\t\tFuel_Inlet_MMBTU_MIN_Recovery__c as string,\n\t\tFuel_Inlet_MMBTU_Notes__c as string,\n\t\tFuel_Inlet_MMBTU_Pricing_Mechanism__c as string,\n\t\tFulfilled_Comments__c as string,\n\t\tFulfilled_Date__c as string,\n\t\tFulfilled__c as string,\n\t\tGain_Loss_Note__c as string,\n\t\tI_Butane_IC4_Deduct__c as string,\n\t\tI_Butane_IC4_Ethane_Rejection__c as string,\n\t\tI_Butane_IC4_MAX_Recovery__c as string,\n\t\tI_Butane_IC4_MIN_Recovery__c as string,\n\t\tI_Butane_IC4_Notes__c as string,\n\t\tI_Butane_IC4_Pricing_Mechanism__c as string,\n\t\tIndex_Note__c as string,\n\t\tIndex_Type__c as string,\n\t\tInvoice_Contact_Address__c as string,\n\t\tInvoice_Contact_City__c as string,\n\t\tInvoice_Contact_Email__c as string,\n\t\tInvoice_Contact_Fax__c as string,\n\t\tInvoice_Contact_Name__c as string,\n\t\tInvoice_Contact_Phone__c as string,\n\t\tInvoice_Contact_State__c as string,\n\t\tInvoice_Contact_Zip__c as string,\n\t\tLoss_Allowance__c as string,\n\t\tLoss_Percentage_Note__c as string,\n\t\tLoss_Percentage__c as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'dlslkppocfs1',\n\tfolderPath: 'SourceFiles',\n\tfileName: 'QueryDataCMS.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> QueryDatSource\nQueryDatSource select(mapColumn(\n\t\tContractDescription = {Sort_Account__c.Name}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectContract\nSelectContract sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'ContractLanaT1',\n\ttableName: 'Contract',\n\tinput(\n\t\tContractId as integer,\n\t\tContractDescription as string,\n\t\tContractLegalReviewDate as date,\n\t\tContractSignedDate as date,\n\t\tContractEffectiveStartDate as date,\n\t\tContractEffectiveEndDate as date,\n\t\tContractPeriodMonths as integer,\n\t\tAutomaticRenewalIndicator as boolean,\n\t\tAutomaticRenewalNotificationPeriod as decimal(3,0),\n\t\tPrepaidContractIndicator as boolean,\n\t\tBankruptcyCondition as string,\n\t\tRevocationOfOfferBySellerCondition as string,\n\t\tTermsOfOfferConditions as string,\n\t\tRelapseOfReasonableTimeCondition as string,\n\t\tRejectionOfOfferByBuyerCondition as string,\n\t\tContractTypeId as integer,\n\t\tContractCategoryId as integer,\n\t\tIsoCurrencyCode as string,\n\t\tIsoLanguageId as integer,\n\t\tCustomerAccountId as long\n\t)) ~> ContractSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ContractSourceLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripFaresDataTransformations')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TripFaresDataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tripDataSink",
								"type": "DatasetReference"
							},
							"name": "TripDataCSV"
						},
						{
							"dataset": {
								"referenceName": "faresDataSink",
								"type": "DatasetReference"
							},
							"name": "FaresDataCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureSynapseAnalyticsTable",
								"type": "DatasetReference"
							},
							"name": "SynapseAnalyticsSink"
						}
					],
					"transformations": [
						{
							"name": "AggregateByPaymentType"
						},
						{
							"name": "InnerJoinWithTripFares"
						}
					],
					"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as string,\n\t\ttrip_time_in_secs as string,\n\t\ttrip_distance as string,\n\t\tpickup_longitude as string,\n\t\tpickup_latitude as string,\n\t\tdropoff_longitude as string,\n\t\tdropoff_latitude as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> TripDataCSV\nsource(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\tpickup_datetime as string,\n\t\tpayment_type as string,\n\t\tfare_amount as string,\n\t\tsurcharge as string,\n\t\tmta_tax as string,\n\t\ttip_amount as string,\n\t\ttolls_amount as string,\n\t\ttotal_amount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> FaresDataCSV\nInnerJoinWithTripFares aggregate(groupBy(payment_type),\n\taverage_fare = avg(toInteger(total_amount)),\n\t\ttotal_trip_distance = sum(toInteger(trip_distance))) ~> AggregateByPaymentType\nTripDataCSV, FaresDataCSV join(TripDataCSV@medallion == FaresDataCSV@medallion\n\t&& TripDataCSV@hack_license == FaresDataCSV@hack_license\n\t&& TripDataCSV@vendor_id == FaresDataCSV@vendor_id\n\t&& TripDataCSV@pickup_datetime == FaresDataCSV@pickup_datetime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> InnerJoinWithTripFares\nAggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SynapseAnalyticsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [ContractId]\n,[ContractDescription]\n,[ContractLegalReviewDate]\n,[ContractSignedDate]\n,[ContractEffectiveStartDate]\n,[ContractEffectiveEndDate]\n,[ContractPeriodMonths]\n,[AutomaticRenewalIndicator]\n,[AutomaticRenewalNotificationPeriod]\n,[PrepaidContractIndicator]\n,[BankruptcyCondition]\n,[RevocationOfOfferBySellerCondition]\n,[TermsOfOfferConditions]\n,[RelapseOfReasonableTimeCondition]\n,[RejectionOfOfferByBuyerCondition]\n,[ContractTypeId]\n,[ContractCategoryId]\n,[IsoCurrencyCode]\n,[IsoLanguageId]\n,[CustomerAccountId]\n FROM [ContractLanaT1].[dbo].[Contract]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ContractLanaT1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Exploration and ML Modeling - NYC taxi predict using Spark MLlib')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ws1sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "35f2b897-1fc5-490b-a771-431e5b01d198"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/adfc7a1a-01b6-476b-b501-00136085913d/resourceGroups/F1Demo/providers/Microsoft.Synapse/workspaces/lkpkkh5fohw6et5cpocws1/bigDataPools/ws1sparkpool1",
						"name": "ws1sparkpool1",
						"type": "Spark",
						"endpoint": "https://lkpkkh5fohw6et5cpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 5,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
							"\n",
							"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
							"The goal is to predict for a given trip whether there will be a tip or not.\n",
							"\n",
							" https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-machine-learning-mllib-notebook\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from pyspark.sql.functions import unix_timestamp\n",
							"\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Ingest Data¶ \n",
							"\n",
							"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"#To make development easier, faster and less expensive downsample for now\n",
							"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory Data Analysis\n",
							"\n",
							"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
							"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
							"\n",
							"# Look at tips by amount count histogram\n",
							"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
							"ax1.set_title('Tip amount distribution')\n",
							"ax1.set_xlabel('Tip Amount ($)')\n",
							"ax1.set_ylabel('Counts')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# How many passengers tip'd by various amounts\n",
							"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
							"ax2.set_title('Tip amount by Passenger count')\n",
							"ax2.set_xlabel('Passenger count') \n",
							"ax2.set_ylabel('Tip Amount ($)')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# Look at the relationship between fare and tip amounts\n",
							"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
							"ax.set_title('Tip amount by Fare amount')\n",
							"ax.set_xlabel('Fare Amount ($)')\n",
							"ax.set_ylabel('Tip Amount ($)')\n",
							"plt.axis([-2, 80, -2, 20])\n",
							"plt.suptitle('')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization\n",
							"\n",
							"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
							"\n",
							"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization Part 2\n",
							"\n",
							"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
							"\n",
							"Also create some more features based on new columns from the first round.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Encoding\n",
							"\n",
							"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
							"\n",
							"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
							"\n",
							"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Generation of Testing and Training Data Sets\n",
							"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Decide on the split between training and testing data from the dataframe \n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train the Model\n",
							"\n",
							"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another for of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
							"fileName = \"lrModel_\" + datestamp;\n",
							"logRegDirfilename = fileName;\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Evaluate and Visualize\n",
							"\n",
							"Plot the actual curve to develop a better understanding of the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 19
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ContractLanaT1')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ContractLanaT1",
							"EntityType": "DATABASE",
							"Description": "",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"OilGas\",\"Version\":\"0.1.0\"}}}",
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://dlslkppocfs1@lkpkkh5fohw6et5cpoc.dfs.core.windows.net/ContractLanaT1",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "ContractSourceLS"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Contract",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "ContractLanaT1"
							},
							"Description": "A written agreement between two or more parties specifying the terms and conditions under which business obligations will be performed.",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "ContractId",
										"Description": "The unique identifier of a Contract.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractId"
										}
									},
									{
										"Name": "ContractDescription",
										"Description": "The description of the contract.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractDescription"
										}
									},
									{
										"Name": "ContractLegalReviewDate",
										"Description": "The date that the legal review of the associated Contract was completed.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractLegalReviewDate"
										}
									},
									{
										"Name": "ContractSignedDate",
										"Description": "The date that the Contract was signed.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractSignedDate"
										}
									},
									{
										"Name": "ContractEffectiveStartDate",
										"Description": "The date that the Contract goes into effect.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractEffectiveStartDate"
										}
									},
									{
										"Name": "ContractEffectiveEndDate",
										"Description": "The date that the Contract is terminated or expires.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractEffectiveEndDate"
										}
									},
									{
										"Name": "ContractPeriodMonths",
										"Description": "The number of months that the contract is to be in effect.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractPeriodMonths"
										}
									},
									{
										"Name": "AutomaticRenewalIndicator",
										"Description": "Indicates that the Contract is to be automatically renewed upon expiration.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "AutomaticRenewalIndicator"
										}
									},
									{
										"Name": "AutomaticRenewalNotificationPeriod",
										"Description": "The period in days in which the Contract holder is to be notified in advance that the Contract is due to expire.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 3,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "AutomaticRenewalNotificationPeriod"
										}
									},
									{
										"Name": "PrepaidContractIndicator",
										"Description": "Indicates that the Contract is prepaid by the Contract holder.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "PrepaidContractIndicator"
										}
									},
									{
										"Name": "BankruptcyCondition",
										"Description": "A description of the terms and conditions under which bankruptcy will affect or void the associated Contract or terms therein.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "BankruptcyCondition"
										}
									},
									{
										"Name": "RevocationOfOfferBySellerCondition",
										"Description": "A description of the condition(s) under which the Seller may revoke a tendered offer to provide or sell items under the associated Contract.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "RevocationOfOfferBySellerCondition"
										}
									},
									{
										"Name": "TermsOfOfferConditions",
										"Description": "A description of the item offering terms provided by the Seller under the associated Contract.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "TermsOfOfferConditions"
										}
									},
									{
										"Name": "RelapseOfReasonableTimeCondition",
										"Description": "A description of the condition(s) under which the purchaser may void the terms of the contract due to the seller being unable to provide the items covered by the Contract.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "RelapseOfReasonableTimeCondition"
										}
									},
									{
										"Name": "RejectionOfOfferByBuyerCondition",
										"Description": "A description of the conditions under which the buyer may reject items provided under offer by the Seller in connection with the associated  Contract.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "RejectionOfOfferByBuyerCondition"
										}
									},
									{
										"Name": "ContractTypeId",
										"Description": "The unique identifier of a Contract Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractTypeId"
										}
									},
									{
										"Name": "ContractCategoryId",
										"Description": "The unique identifier of a contract category.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "ContractCategoryId"
										}
									},
									{
										"Name": "IsoCurrencyCode",
										"Description": "The ISO 4217 currency code.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 3,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "IsoCurrencyCode"
										}
									},
									{
										"Name": "IsoLanguageId",
										"Description": "The unique identifier of an ISO Language.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "IsoLanguageId"
										}
									},
									{
										"Name": "CustomerAccountId",
										"Description": "The unique identifier of a Customer Account.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Contract.cdm.json/Contract",
											"Name": "CustomerAccountId"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlslkppocfs1@lkpkkh5fohw6et5cpoc.dfs.core.windows.net/ContractLanaT1/Contract",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlslkppocfs1@lkpkkh5fohw6et5cpoc.dfs.core.windows.net/ContractLanaT1/Contract",
									"Properties": {
										"LinkedServiceName": "ContractSourceLS",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ContractId\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractId\"},\"ContractDescription\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractDescription\"},\"ContractLegalReviewDate\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractLegalReviewDate\"},\"ContractSignedDate\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractSignedDate\"},\"ContractEffectiveStartDate\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractEffectiveStartDate\"},\"ContractEffectiveEndDate\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractEffectiveEndDate\"},\"ContractPeriodMonths\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractPeriodMonths\"},\"AutomaticRenewalIndicator\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"AutomaticRenewalIndicator\"},\"AutomaticRenewalNotificationPeriod\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"AutomaticRenewalNotificationPeriod\"},\"PrepaidContractIndicator\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"PrepaidContractIndicator\"},\"BankruptcyCondition\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"BankruptcyCondition\"},\"RevocationOfOfferBySellerCondition\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"RevocationOfOfferBySellerCondition\"},\"TermsOfOfferConditions\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"TermsOfOfferConditions\"},\"RelapseOfReasonableTimeCondition\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"RelapseOfReasonableTimeCondition\"},\"RejectionOfOfferByBuyerCondition\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"RejectionOfOfferByBuyerCondition\"},\"ContractTypeId\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractTypeId\"},\"ContractCategoryId\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractCategoryId\"},\"IsoCurrencyCode\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"IsoCurrencyCode\"},\"IsoLanguageId\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"IsoLanguageId\"},\"CustomerAccountId\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"CustomerAccountId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"name\":\"Contract\",\"description\":\"A written agreement between two or more parties specifying the terms and conditions under which business obligations will be performed.\",\"baseEntityReference\":{\"name\":\"Contract\",\"path\":\"Contract.cdm.json/Contract\"},\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Contract.\",\"isNullable\":false,\"name\":\"ContractId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512,\"description\":\"The description of the contract.\",\"isNullable\":true,\"name\":\"ContractDescription\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractLegalReviewDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the legal review of the associated Contract was completed.\",\"isNullable\":true,\"name\":\"ContractLegalReviewDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractSignedDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Contract was signed.\",\"isNullable\":true,\"name\":\"ContractSignedDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractEffectiveStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Contract goes into effect.\",\"isNullable\":true,\"name\":\"ContractEffectiveStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractEffectiveEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Contract is terminated or expires.\",\"isNullable\":true,\"name\":\"ContractEffectiveEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractPeriodMonths\"},\"dataType\":\"integer\",\"description\":\"The number of months that the contract is to be in effect.\",\"isNullable\":true,\"name\":\"ContractPeriodMonths\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"AutomaticRenewalIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the Contract is to be automatically renewed upon expiration.\",\"isNullable\":true,\"name\":\"AutomaticRenewalIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"AutomaticRenewalNotificationPeriod\"},\"dataType\":\"decimal\",\"dataTypeLength\":3,\"description\":\"The period in days in which the Contract holder is to be notified in advance that the Contract is due to expire.\",\"isNullable\":true,\"scale\":0,\"name\":\"AutomaticRenewalNotificationPeriod\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"PrepaidContractIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the Contract is prepaid by the Contract holder.\",\"isNullable\":true,\"name\":\"PrepaidContractIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"BankruptcyCondition\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A description of the terms and conditions under which bankruptcy will affect or void the associated Contract or terms therein.\",\"isNullable\":true,\"name\":\"BankruptcyCondition\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"RevocationOfOfferBySellerCondition\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A description of the condition(s) under which the Seller may revoke a tendered offer to provide or sell items under the associated Contract.\",\"isNullable\":true,\"name\":\"RevocationOfOfferBySellerCondition\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"TermsOfOfferConditions\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A description of the item offering terms provided by the Seller under the associated Contract.\",\"isNullable\":true,\"name\":\"TermsOfOfferConditions\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"RelapseOfReasonableTimeCondition\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A description of the condition(s) under which the purchaser may void the terms of the contract due to the seller being unable to provide the items covered by the Contract.\",\"isNullable\":true,\"name\":\"RelapseOfReasonableTimeCondition\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"RejectionOfOfferByBuyerCondition\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A description of the conditions under which the buyer may reject items provided under offer by the Seller in connection with the associated  Contract.\",\"isNullable\":true,\"name\":\"RejectionOfOfferByBuyerCondition\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Contract Type.\",\"isNullable\":true,\"name\":\"ContractTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"ContractCategoryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a contract category.\",\"isNullable\":true,\"name\":\"ContractCategoryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"IsoCurrencyCode\"},\"dataType\":\"string\",\"dataTypeLength\":3,\"description\":\"The ISO 4217 currency code.\",\"isNullable\":true,\"name\":\"IsoCurrencyCode\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"IsoLanguageId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an ISO Language.\",\"isNullable\":true,\"name\":\"IsoLanguageId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Contract.cdm.json/Contract\",\"name\":\"CustomerAccountId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer Account.\",\"isNullable\":true,\"name\":\"CustomerAccountId\"}]},\"primaryKey\":[\"ContractId\"]}}",
								"Description": "A written agreement between two or more parties specifying the terms and conditions under which business obligations will be performed.",
								"DisplayFolderInfo": "{\"name\":\"Contract\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "ContractId",
								"spark.sql.sources.provider": "csv"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ContractType",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "ContractLanaT1"
							},
							"Description": "A categorization of Contracts based upon common characteristics, attributes or functions served.\n\nEx:\n- Sales\n- Service\n- Employment\n- Lease \n- Equipment Lease\n- Land Lease\n- Mineral Lease\n- Oil & Gas Lease\n- Leasehold Interest\n- Distributor\n- Financial\n- Security\n- Utilities\n- Royalty\n- Royalty Deed\n- Landowner's Royalty\n- Tenure\n- Turnkey\n- Joint Operating Agreement\n- Joint Venture Agreement\n- Drilling\n- Dry hole agreement\n- Farmout",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "ContractTypeId",
										"Description": "The unique identifier of a Contract Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ContractType.cdm.json/ContractType",
											"Name": "ContractTypeId"
										}
									},
									{
										"Name": "ContractTypeName",
										"Description": "The name of the Contract Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ContractType.cdm.json/ContractType",
											"Name": "ContractTypeName"
										}
									},
									{
										"Name": "ContractTypeDescription",
										"Description": "The description of the Contract Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ContractType.cdm.json/ContractType",
											"Name": "ContractTypeDescription"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlslkppocfs1@lkpkkh5fohw6et5cpoc.dfs.core.windows.net/ContractLanaT1/ContractType",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlslkppocfs1@lkpkkh5fohw6et5cpoc.dfs.core.windows.net/ContractLanaT1/ContractType",
									"Properties": {
										"LinkedServiceName": "ContractSourceLS",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ContractTypeId\":{\"entity\":\"ContractType.cdm.json/ContractType\",\"name\":\"ContractTypeId\"},\"ContractTypeName\":{\"entity\":\"ContractType.cdm.json/ContractType\",\"name\":\"ContractTypeName\"},\"ContractTypeDescription\":{\"entity\":\"ContractType.cdm.json/ContractType\",\"name\":\"ContractTypeDescription\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"name\":\"ContractType\",\"description\":\"A categorization of Contracts based upon common characteristics, attributes or functions served.\\n\\nEx:\\n- Sales\\n- Service\\n- Employment\\n- Lease \\n- Equipment Lease\\n- Land Lease\\n- Mineral Lease\\n- Oil & Gas Lease\\n- Leasehold Interest\\n- Distributor\\n- Financial\\n- Security\\n- Utilities\\n- Royalty\\n- Royalty Deed\\n- Landowner's Royalty\\n- Tenure\\n- Turnkey\\n- Joint Operating Agreement\\n- Joint Venture Agreement\\n- Drilling\\n- Dry hole agreement\\n- Farmout\",\"baseEntityReference\":{\"name\":\"ContractType\",\"path\":\"ContractType.cdm.json/ContractType\"},\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ContractType.cdm.json/ContractType\",\"name\":\"ContractTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Contract Type.\",\"isNullable\":false,\"name\":\"ContractTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ContractType.cdm.json/ContractType\",\"name\":\"ContractTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":128,\"description\":\"The name of the Contract Type.\",\"isNullable\":true,\"name\":\"ContractTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ContractType.cdm.json/ContractType\",\"name\":\"ContractTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512,\"description\":\"The description of the Contract Type.\",\"isNullable\":true,\"name\":\"ContractTypeDescription\"}]},\"primaryKey\":[\"ContractTypeId\"]}}",
								"Description": "A categorization of Contracts based upon common characteristics, attributes or functions served.\n\nEx:\n- Sales\n- Service\n- Employment\n- Lease \n- Equipment Lease\n- Land Lease\n- Mineral Lease\n- Oil & Gas Lease\n- Leasehold Interest\n- Distributor\n- Financial\n- Security\n- Utilities\n- Royalty\n- Royalty Deed\n- Landowner's Royalty\n- Tenure\n- Turnkey\n- Joint Operating Agreement\n- Joint Venture Agreement\n- Drilling\n- Dry hole agreement\n- Farmout",
								"DisplayFolderInfo": "{\"name\":\"Contract\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "ContractTypeId",
								"spark.sql.sources.provider": "csv"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-fqfoqkbjgm",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "ContractLanaT1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "ContractType",
							"ToTableName": "Contract",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ContractTypeId",
									"ToColumnName": "ContractTypeId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"ContractType.cdm.json/ContractType\",\"toEntity\":\"Contract.cdm.json/Contract\",\"joinPairs\":[{\"fromAttribute\":\"ContractTypeId\",\"toAttribute\":\"ContractTypeId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ws1sparkpool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 40,
					"minNodeCount": 3
				},
				"nodeCount": 5,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lkpkkh5fohw6et5cpocws1p1')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		}
	]
}