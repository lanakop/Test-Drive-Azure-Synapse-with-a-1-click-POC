{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiCollection2",
						"type": "DatasetReference"
					},
					"name": "cosmosdb"
				},
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {_active} as boolean,",
				"          {_dateDTO} as string,",
				"          {_docId} as string,",
				"          {_expirationDateDT} as date,",
				"          {_pkey} as string,",
				"          date as date,",
				"          doseQuantity as (code as string, system as string, unit as string, value as double),",
				"          encounter as (reference as string, identifier as (system as string, value as string)),",
				"          expirationDate as date,",
				"          explanation as (reason as (coding as (code as integer, display as string, system as string)[])[]),",
				"          extension as ({_valueDateTimeDTO} as string, url as string, valueCoding as (code as string, display as string), valueDateTime as string, valueString as string)[],",
				"          identifier as (system as string, type as (coding as (system as string, code as string, display as string)[]), use as string, value as string)[],",
				"          location as (display as string, reference as string),",
				"          lotNumber as string,",
				"          manufacturer as (display as string, identifier as (system as string, value as string), reference as string),",
				"          meta as (lastUpdated as string, security as (system as string, code as string, display as string)[], tag as (code as string, display as string, system as string)[], versionId as short),",
				"          notGiven as boolean,",
				"          note as (text as string)[],",
				"          patient as (reference as string, display as string),",
				"          practitioner as (actor as (display as string, reference as string), role as (coding as (system as string, code as string)[]))[],",
				"          primarySource as boolean,",
				"          reaction as string[],",
				"          reportOrigin as (coding as (code as string, display as string)[]),",
				"          resourceType as string,",
				"          route as (coding as (code as string, display as string, system as string)[]),",
				"          site as (coding as (code as string, display as string, system as string)[]),",
				"          status as string,",
				"          text as (div as string, status as string),",
				"          vaccinationProtocol as (authority as (reference as string, display as string), description as string, doseSequence as boolean, doseStatus as (coding as (system as string, code as string, display as string)[]), doseStatusReason as (coding as (code as string, display as string, system as string)[]), series as string, seriesDoses as short, targetDisease as (coding as (code as integer, display as string, system as string)[])[])[],",
				"          vaccineCode as (coding as (code as string, display as string, system as string)[], text as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> cosmosdb",
				"source(output(",
				"          resourceType as string,",
				"          id as string,",
				"          meta as (versionId as integer, lastUpdated as string, tag as (system as string, code as string)[], security as (system as string, code as string, display as string)[]),",
				"          text as (status as string, div as string),",
				"          identifier as (system as string, value as string)[],",
				"          status as string,",
				"          notGiven as boolean,",
				"          vaccineCode as (coding as (system as string, code as string)[], text as string),",
				"          patient as (reference as string, display as string),",
				"          encounter as (reference as string, identifier as (system as string, value as string)),",
				"          date as string,",
				"          {_dateDTO} as string,",
				"          primarySource as boolean,",
				"          location as (reference as string, display as string),",
				"          manufacturer as (reference as string, display as string, identifier as (system as string, value as string)),",
				"          lotNumber as string,",
				"          expirationDate as string,",
				"          {_expirationDateDT} as string,",
				"          site as (coding as (system as string, code as string, display as string)[]),",
				"          route as (coding as (system as string, code as string, display as string)[]),",
				"          doseQuantity as (value as double, system as string, code as string, unit as string),",
				"          practitioner as (role as (coding as (system as string, code as string)[]), actor as (reference as string))[],",
				"          note as (text as string)[],",
				"          explanation as (reason as (coding as (system as string, code as string)[])[]),",
				"          vaccinationProtocol as (doseSequence as integer, description as string, authority as (reference as string, display as string), series as string, seriesDoses as integer, targetDisease as (coding as (system as string, code as string)[])[], doseStatus as (coding as (system as string, code as string, display as string)[]), doseStatusReason as (coding as (system as string, code as string, display as string)[]))[],",
				"          {_etag} as string,",
				"          {_active} as boolean,",
				"          {_pkey} as string,",
				"          {_docId} as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer,",
				"          reaction as string[],",
				"          reportOrigin as (coding as (code as string, display as string)[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"cosmosdb foldDown(unroll(meta.tag, meta.tag),",
				"     mapColumn(",
				"          resourceType,",
				"          metatagsystem = meta.tag.system,",
				"          metatagcode = meta.tag.code,",
				"          versionId = meta.versionId,",
				"          lastUpdated = meta.lastUpdated,",
				"          status,",
				"          notGiven,",
				"          {_docId},",
				"          security = meta.security",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1"
			]
		}
	}
}